import { HttpHelper } from '../../utils/http-helper.js';
import { CRoom } from '../../domain/room.js';
import { dateToUnixStamp } from '../../../search.js';
export class FlatProvider {
  find(filter) {
    return HttpHelper.fetchAsJson(FlatProvider.apiUrl + '/?' +
      this.convertFilterToQueryString(filter))
      .then((response) => {
        this.assertIsValidResponse(response);
        return this.convertRoomListResponse(response);
      });
  }
  getByParams(checkInDate, checkOutDate, maxPrice) {
    return HttpHelper.fetchAsJson(`${FlatProvider.apiUrl}/?city='Санкт-Петербург'&checkInDate=${dateToUnixStamp(checkInDate)}&checkOutDate=${dateToUnixStamp(checkOutDate)}&priceLimit=${maxPrice}`)
      .then((response) => {
        this.assertIsValidResponse(response);
        return this.convertRoomResponse(response.items);
      });
  }
  assertIsValidResponse(response) {
    if (response.errorMessage !== null) {
      throw new Error(response.errorMessage);
    }
  }
  convertFilterToQueryString(filter) {
    return `checkInDate=${dateToUnixStamp(filter.checkInDate)}&checkOutDate=${dateToUnixStamp(filter.checkOutDate)}&priceLimit=${filter.maxPrice}`;
  }
  convertRoomListResponse(response) {
    return response.items.map(item => {
      return this.convertRoomResponse(item);
    });
  }
  convertRoomResponse(item) {
    return new CRoom(FlatProvider.provider, String(item.placeId), item.title, item.details, item.photos, item.coordinates, item.bookedDates, item.priceLimit);
  }
}
FlatProvider.provider = 'flat';
FlatProvider.apiUrl = 'http://localhost:3040';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmxhdC1wcm92aWRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9zdG9yZS9wcm92aWRlcnMvZmxhdHJlbnQvZmxhdC1wcm92aWRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDckQsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBRTFDLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUdsRCxNQUFNLE9BQU8sWUFBWTtJQU1oQixJQUFJLENBQUMsTUFBb0I7UUFDOUIsT0FBTyxVQUFVLENBQUMsV0FBVyxDQUUzQixZQUFZLENBQUMsTUFBTSxHQUFHLElBQUk7WUFFMUIsSUFBSSxDQUFDLDBCQUEwQixDQUFDLE1BQU0sQ0FBQyxDQUN4QzthQUNFLElBQUksQ0FBQyxDQUFDLFFBQVEsRUFBRSxFQUFFO1lBQ2pCLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxRQUFRLENBQUMsQ0FBQTtZQUVwQyxPQUFPLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxRQUFRLENBQUMsQ0FBQTtRQUMvQyxDQUFDLENBQUMsQ0FBQTtJQUNOLENBQUM7SUFFTSxXQUFXLENBQ2hCLFdBQWlCLEVBQ2pCLFlBQWtCLEVBQ2xCLFFBQWlCO1FBRWpCLE9BQU8sVUFBVSxDQUFDLFdBQVcsQ0FFM0IsR0FBRyxZQUFZLENBQUMsTUFBTSx3Q0FBd0MsZUFBZSxDQUFDLFdBQVcsQ0FBQyxpQkFBaUIsZUFBZSxDQUFDLFlBQVksQ0FBQyxlQUFlLFFBQVEsRUFBRSxDQUVsSzthQUNFLElBQUksQ0FBQyxDQUFDLFFBQVEsRUFBRSxFQUFFO1lBRWpCLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxRQUFRLENBQUMsQ0FBQTtZQUVwQyxPQUFPLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUE7UUFDakQsQ0FBQyxDQUFDLENBQUE7SUFDTixDQUFDO0lBRU8scUJBQXFCLENBQUMsUUFBMkI7UUFDdkQsSUFBSSxRQUFRLENBQUMsWUFBWSxLQUFLLElBQUksRUFBRTtZQUNsQyxNQUFNLElBQUksS0FBSyxDQUFDLFFBQVEsQ0FBQyxZQUFZLENBQUMsQ0FBQTtTQUN2QztJQUNILENBQUM7SUFFTywwQkFBMEIsQ0FBQyxNQUFvQjtRQUNyRCxPQUFPLGVBQWUsZUFBZSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsaUJBQWlCLGVBQWUsQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDLGVBQWUsTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFBO0lBQ2hKLENBQUM7SUFFTyx1QkFBdUIsQ0FBQyxRQUEyQjtRQUN6RCxPQUFPLFFBQVEsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQy9CLE9BQU8sSUFBSSxDQUFDLG1CQUFtQixDQUFDLElBQUksQ0FBQyxDQUFBO1FBQ3ZDLENBQUMsQ0FBQyxDQUFBO0lBQ0osQ0FBQztJQUVPLG1CQUFtQixDQUFDLElBQUk7UUFDOUIsT0FBTyxJQUFJLEtBQUssQ0FDZCxZQUFZLENBQUMsUUFBUSxFQUNyQixNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUNwQixJQUFJLENBQUMsS0FBSyxFQUNWLElBQUksQ0FBQyxPQUFPLEVBQ1osSUFBSSxDQUFDLE1BQU0sRUFDWCxJQUFJLENBQUMsV0FBVyxFQUNoQixJQUFJLENBQUMsV0FBVyxFQUNoQixJQUFJLENBQUMsVUFBVSxDQUNoQixDQUFBO0lBQ0gsQ0FBQzs7QUEvRGEscUJBQVEsR0FBRyxNQUFNLENBQUE7QUFFaEIsbUJBQU0sR0FBRyx1QkFBdUIsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFByb3ZpZGVyIH0gZnJvbSAnLi4vLi4vZG9tYWluL3Byb3ZpZGVyJztcbmltcG9ydCB7IFNlYXJjaEZpbHRlciB9IGZyb20gJy4uLy4uL2RvbWFpbi9zZWFyY2gtZmlsdGVyJztcbmltcG9ydCB7IEh0dHBIZWxwZXIgfSBmcm9tICcuLi8uLi91dGlscy9odHRwLWhlbHBlcic7XG5pbXBvcnQgeyBDUm9vbSB9IGZyb20gJy4uLy4uL2RvbWFpbi9yb29tJztcbmltcG9ydCB7IElSb29tTGlzdFJlc3BvbnNlIH0gZnJvbSAnLi9yZXNwb25zZSc7XG5pbXBvcnQgeyBkYXRlVG9Vbml4U3RhbXAgfSBmcm9tICcuLi8uLi8uLi9zZWFyY2gnO1xuXG5cbmV4cG9ydCBjbGFzcyBGbGF0UHJvdmlkZXIgaW1wbGVtZW50cyBQcm92aWRlciB7XG5cbiAgcHVibGljIHN0YXRpYyBwcm92aWRlciA9ICdmbGF0J1xuXG4gIHByaXZhdGUgc3RhdGljIGFwaVVybCA9ICdodHRwOi8vbG9jYWxob3N0OjMwNDAnXG5cbiAgcHVibGljIGZpbmQoZmlsdGVyOiBTZWFyY2hGaWx0ZXIpIHtcbiAgICByZXR1cm4gSHR0cEhlbHBlci5mZXRjaEFzSnNvbjxJUm9vbUxpc3RSZXNwb25zZT4oXG5cbiAgICAgIEZsYXRQcm92aWRlci5hcGlVcmwgKyAnLz8nICtcblxuICAgICAgdGhpcy5jb252ZXJ0RmlsdGVyVG9RdWVyeVN0cmluZyhmaWx0ZXIpXG4gICAgKVxuICAgICAgLnRoZW4oKHJlc3BvbnNlKSA9PiB7XG4gICAgICAgIHRoaXMuYXNzZXJ0SXNWYWxpZFJlc3BvbnNlKHJlc3BvbnNlKVxuXG4gICAgICAgIHJldHVybiB0aGlzLmNvbnZlcnRSb29tTGlzdFJlc3BvbnNlKHJlc3BvbnNlKVxuICAgICAgfSlcbiAgfVxuXG4gIHB1YmxpYyBnZXRCeVBhcmFtcyhcbiAgICBjaGVja0luRGF0ZTogRGF0ZSxcbiAgICBjaGVja091dERhdGU6IERhdGUsXG4gICAgbWF4UHJpY2U/OiBudW1iZXJcbiAgKSB7XG4gICAgcmV0dXJuIEh0dHBIZWxwZXIuZmV0Y2hBc0pzb248SVJvb21MaXN0UmVzcG9uc2U+KFxuXG4gICAgICBgJHtGbGF0UHJvdmlkZXIuYXBpVXJsfS8/Y2l0eT0n0KHQsNC90LrRgi3Qn9C10YLQtdGA0LHRg9GA0LMnJmNoZWNrSW5EYXRlPSR7ZGF0ZVRvVW5peFN0YW1wKGNoZWNrSW5EYXRlKX0mY2hlY2tPdXREYXRlPSR7ZGF0ZVRvVW5peFN0YW1wKGNoZWNrT3V0RGF0ZSl9JnByaWNlTGltaXQ9JHttYXhQcmljZX1gXG5cbiAgICApXG4gICAgICAudGhlbigocmVzcG9uc2UpID0+IHtcblxuICAgICAgICB0aGlzLmFzc2VydElzVmFsaWRSZXNwb25zZShyZXNwb25zZSlcblxuICAgICAgICByZXR1cm4gdGhpcy5jb252ZXJ0Um9vbVJlc3BvbnNlKHJlc3BvbnNlLml0ZW1zKVxuICAgICAgfSlcbiAgfVxuXG4gIHByaXZhdGUgYXNzZXJ0SXNWYWxpZFJlc3BvbnNlKHJlc3BvbnNlOiBJUm9vbUxpc3RSZXNwb25zZSk6IHZvaWQge1xuICAgIGlmIChyZXNwb25zZS5lcnJvck1lc3NhZ2UgIT09IG51bGwpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihyZXNwb25zZS5lcnJvck1lc3NhZ2UpXG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBjb252ZXJ0RmlsdGVyVG9RdWVyeVN0cmluZyhmaWx0ZXI6IFNlYXJjaEZpbHRlcik6IHN0cmluZyB7XG4gICAgcmV0dXJuIGBjaGVja0luRGF0ZT0ke2RhdGVUb1VuaXhTdGFtcChmaWx0ZXIuY2hlY2tJbkRhdGUpfSZjaGVja091dERhdGU9JHtkYXRlVG9Vbml4U3RhbXAoZmlsdGVyLmNoZWNrT3V0RGF0ZSl9JnByaWNlTGltaXQ9JHtmaWx0ZXIubWF4UHJpY2V9YFxuICB9XG5cbiAgcHJpdmF0ZSBjb252ZXJ0Um9vbUxpc3RSZXNwb25zZShyZXNwb25zZTogSVJvb21MaXN0UmVzcG9uc2UpOiBDUm9vbVtdIHtcbiAgICByZXR1cm4gcmVzcG9uc2UuaXRlbXMubWFwKGl0ZW0gPT4ge1xuICAgICAgcmV0dXJuIHRoaXMuY29udmVydFJvb21SZXNwb25zZShpdGVtKVxuICAgIH0pXG4gIH1cblxuICBwcml2YXRlIGNvbnZlcnRSb29tUmVzcG9uc2UoaXRlbSkge1xuICAgIHJldHVybiBuZXcgQ1Jvb20oXG4gICAgICBGbGF0UHJvdmlkZXIucHJvdmlkZXIsXG4gICAgICBTdHJpbmcoaXRlbS5wbGFjZUlkKSxcbiAgICAgIGl0ZW0udGl0bGUsXG4gICAgICBpdGVtLmRldGFpbHMsXG4gICAgICBpdGVtLnBob3RvcyxcbiAgICAgIGl0ZW0uY29vcmRpbmF0ZXMsXG4gICAgICBpdGVtLmJvb2tlZERhdGVzLFxuICAgICAgaXRlbS5wcmljZUxpbWl0XG4gICAgKVxuICB9XG59XG4iXX0=
