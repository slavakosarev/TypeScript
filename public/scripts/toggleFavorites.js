import { APIlocal } from './APIlocal.js';
export function toggleFavoriteItem() {
  setTimeout(() => {
    document.querySelectorAll('[data-fav]').forEach((item) => {
      item.addEventListener('click', (event) => {
        if (!(event.target instanceof HTMLDivElement)) {
          return;
        }
        else {
          const target = event.target;
          const id = target.dataset.fav;
          if (!item.classList.contains('active')) {
            const id = event.target.dataset.fav.toString();
            const favoriteItems = APIlocal.get('favoriteItems');
            const favItemsObj = JSON.parse(favoriteItems);
            const newItemToLS = {
              'id': id,
              'name': target.closest('.result-container').querySelectorAll('.result-info--header p')[0].textContent,
              'image': target.closest('.result-container').querySelectorAll('.result-img')[0].getAttribute('src')
            };
            if (favItemsObj == null) {
              const favItemsNew = [];
              favItemsNew.push(newItemToLS);
              APIlocal.set('favoriteItems', JSON.parse(JSON.stringify(favItemsNew)));
            }
            else {
              favItemsObj.push(newItemToLS);
              APIlocal.set('favoriteItems', favItemsObj);
            }
            target.classList.add('active');
          }
          else {
            const favoriteItems = APIlocal.get('favoriteItems');
            const favoriteObj = JSON.parse(favoriteItems);
            favoriteObj.forEach((favorite, index) => {
              if (favorite.id === id) {
                favoriteObj.splice(index, 1);
              }
            });
            if (favoriteObj.length) {
              APIlocal.set('favoriteItems', favoriteObj);
            }
            target.classList.remove('active');
          }
        }
        const favoritesAmount = JSON.parse(APIlocal.get('favoriteItems'));
        if (favoritesAmount) {
          const len = +favoritesAmount.length;
          const favoritesCount = len || 0;
          document.querySelectorAll('p.fav')[0].innerHTML = `<i class="heart-icon active"></i>${favoritesCount}`;
        }
      });
    });
  }, 1000);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9nZ2xlRmF2b3JpdGVzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3RvZ2dsZUZhdm9yaXRlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sWUFBWSxDQUFDO0FBR3RDLE1BQU0sVUFBVSxrQkFBa0I7SUFFaEMsVUFBVSxDQUFDLEdBQUcsRUFBRTtRQUNkLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQyxZQUFZLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRTtZQUN2RCxJQUFJLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxFQUFFLENBQUMsS0FBSyxFQUFFLEVBQUU7Z0JBRXZDLElBQUksQ0FBQyxDQUFDLEtBQUssQ0FBQyxNQUFNLFlBQVksY0FBYyxDQUFDLEVBQUU7b0JBQzdDLE9BQU87aUJBQ1I7cUJBQ0k7b0JBQ0gsTUFBTSxNQUFNLEdBQUcsS0FBSyxDQUFDLE1BQXdCLENBQUM7b0JBQzlDLE1BQU0sRUFBRSxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDO29CQUU5QixJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLEVBQUU7d0JBQ3RDLE1BQU0sRUFBRSxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsQ0FBQzt3QkFDL0MsTUFBTSxhQUFhLEdBQWtCLFFBQVEsQ0FBQyxHQUFHLENBQUMsZUFBZSxDQUFDLENBQUM7d0JBQ25FLE1BQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDLENBQUM7d0JBQzlDLE1BQU0sV0FBVyxHQUFHOzRCQUNsQixJQUFJLEVBQUUsRUFBRTs0QkFDUixNQUFNLEVBQUUsTUFBTSxDQUFDLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLGdCQUFnQixDQUFDLHdCQUF3QixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVzs0QkFDckcsT0FBTyxFQUFFLE1BQU0sQ0FBQyxPQUFPLENBQUMsbUJBQW1CLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDO3lCQUNwRyxDQUFBO3dCQUVELElBQUksV0FBVyxJQUFJLElBQUksRUFBRTs0QkFDdkIsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDOzRCQUN2QixXQUFXLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFBOzRCQUM3QixRQUFRLENBQUMsR0FBRyxDQUFDLGVBQWUsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDO3lCQUN4RTs2QkFDSTs0QkFDSCxXQUFXLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFBOzRCQUM3QixRQUFRLENBQUMsR0FBRyxDQUFDLGVBQWUsRUFBRSxXQUFXLENBQUMsQ0FBQzt5QkFDNUM7d0JBQ0QsTUFBTSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUM7cUJBQ2hDO3lCQUNJO3dCQUNILE1BQU0sYUFBYSxHQUFrQixRQUFRLENBQUMsR0FBRyxDQUFDLGVBQWUsQ0FBQyxDQUFDO3dCQUNuRSxNQUFNLFdBQVcsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQyxDQUFDO3dCQUU5QyxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUMsUUFBbUIsRUFBRSxLQUFhLEVBQUUsRUFBRTs0QkFFekQsSUFBSSxRQUFRLENBQUMsRUFBRSxLQUFLLEVBQUUsRUFBRTtnQ0FDdEIsV0FBVyxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUM7NkJBQzlCO3dCQUNILENBQUMsQ0FBQyxDQUFBO3dCQUNGLElBQUksV0FBVyxDQUFDLE1BQU0sRUFBRTs0QkFDdEIsUUFBUSxDQUFDLEdBQUcsQ0FBQyxlQUFlLEVBQUUsV0FBVyxDQUFDLENBQUM7eUJBQzVDO3dCQUNELE1BQU0sQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDO3FCQUNuQztpQkFDRjtnQkFDRCxNQUFNLGVBQWUsR0FBZSxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQztnQkFFOUUsSUFBSSxlQUFlLEVBQUU7b0JBRW5CLE1BQU0sR0FBRyxHQUFHLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FBQztvQkFDcEMsTUFBTSxjQUFjLEdBQUcsR0FBRyxJQUFJLENBQUMsQ0FBQztvQkFFaEMsUUFBUSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsR0FBRyxvQ0FBb0MsY0FBYyxFQUFFLENBQUM7aUJBQ3hHO1lBQ0gsQ0FBQyxDQUFDLENBQUE7UUFDSixDQUFDLENBQUMsQ0FBQTtJQUNKLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQTtBQUVWLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBUElsb2NhbCB9IGZyb20gJy4vQVBJbG9jYWwnO1xyXG5pbXBvcnQgeyBURmF2b3JpdGUsIFRGYXZvcml0ZXMgfSBmcm9tICcuL3R5cGVzLmpzJ1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHRvZ2dsZUZhdm9yaXRlSXRlbSgpIHtcclxuXHJcbiAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdbZGF0YS1mYXZdJykuZm9yRWFjaCgoaXRlbSkgPT4ge1xyXG4gICAgICBpdGVtLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGV2ZW50KSA9PiB7XHJcblxyXG4gICAgICAgIGlmICghKGV2ZW50LnRhcmdldCBpbnN0YW5jZW9mIEhUTUxEaXZFbGVtZW50KSkge1xyXG4gICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgIGNvbnN0IHRhcmdldCA9IGV2ZW50LnRhcmdldCBhcyBIVE1MRGl2RWxlbWVudDtcclxuICAgICAgICAgIGNvbnN0IGlkID0gdGFyZ2V0LmRhdGFzZXQuZmF2O1xyXG5cclxuICAgICAgICAgIGlmICghaXRlbS5jbGFzc0xpc3QuY29udGFpbnMoJ2FjdGl2ZScpKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGlkID0gZXZlbnQudGFyZ2V0LmRhdGFzZXQuZmF2LnRvU3RyaW5nKCk7XHJcbiAgICAgICAgICAgIGNvbnN0IGZhdm9yaXRlSXRlbXM6IHN0cmluZyB8IG51bGwgPSBBUElsb2NhbC5nZXQoJ2Zhdm9yaXRlSXRlbXMnKTtcclxuICAgICAgICAgICAgY29uc3QgZmF2SXRlbXNPYmogPSBKU09OLnBhcnNlKGZhdm9yaXRlSXRlbXMpO1xyXG4gICAgICAgICAgICBjb25zdCBuZXdJdGVtVG9MUyA9IHtcclxuICAgICAgICAgICAgICAnaWQnOiBpZCxcclxuICAgICAgICAgICAgICAnbmFtZSc6IHRhcmdldC5jbG9zZXN0KCcucmVzdWx0LWNvbnRhaW5lcicpLnF1ZXJ5U2VsZWN0b3JBbGwoJy5yZXN1bHQtaW5mby0taGVhZGVyIHAnKVswXS50ZXh0Q29udGVudCxcclxuICAgICAgICAgICAgICAnaW1hZ2UnOiB0YXJnZXQuY2xvc2VzdCgnLnJlc3VsdC1jb250YWluZXInKS5xdWVyeVNlbGVjdG9yQWxsKCcucmVzdWx0LWltZycpWzBdLmdldEF0dHJpYnV0ZSgnc3JjJylcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKGZhdkl0ZW1zT2JqID09IG51bGwpIHtcclxuICAgICAgICAgICAgICBjb25zdCBmYXZJdGVtc05ldyA9IFtdO1xyXG4gICAgICAgICAgICAgIGZhdkl0ZW1zTmV3LnB1c2gobmV3SXRlbVRvTFMpXHJcbiAgICAgICAgICAgICAgQVBJbG9jYWwuc2V0KCdmYXZvcml0ZUl0ZW1zJywgSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShmYXZJdGVtc05ldykpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICBmYXZJdGVtc09iai5wdXNoKG5ld0l0ZW1Ub0xTKVxyXG4gICAgICAgICAgICAgIEFQSWxvY2FsLnNldCgnZmF2b3JpdGVJdGVtcycsIGZhdkl0ZW1zT2JqKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0YXJnZXQuY2xhc3NMaXN0LmFkZCgnYWN0aXZlJyk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgY29uc3QgZmF2b3JpdGVJdGVtczogc3RyaW5nIHwgbnVsbCA9IEFQSWxvY2FsLmdldCgnZmF2b3JpdGVJdGVtcycpO1xyXG4gICAgICAgICAgICBjb25zdCBmYXZvcml0ZU9iaiA9IEpTT04ucGFyc2UoZmF2b3JpdGVJdGVtcyk7XHJcblxyXG4gICAgICAgICAgICBmYXZvcml0ZU9iai5mb3JFYWNoKChmYXZvcml0ZTogVEZhdm9yaXRlLCBpbmRleDogbnVtYmVyKSA9PiB7XHJcblxyXG4gICAgICAgICAgICAgIGlmIChmYXZvcml0ZS5pZCA9PT0gaWQpIHtcclxuICAgICAgICAgICAgICAgIGZhdm9yaXRlT2JqLnNwbGljZShpbmRleCwgMSk7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICBpZiAoZmF2b3JpdGVPYmoubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgQVBJbG9jYWwuc2V0KCdmYXZvcml0ZUl0ZW1zJywgZmF2b3JpdGVPYmopO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRhcmdldC5jbGFzc0xpc3QucmVtb3ZlKCdhY3RpdmUnKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgZmF2b3JpdGVzQW1vdW50OiBURmF2b3JpdGVzID0gSlNPTi5wYXJzZShBUElsb2NhbC5nZXQoJ2Zhdm9yaXRlSXRlbXMnKSk7XHJcblxyXG4gICAgICAgIGlmIChmYXZvcml0ZXNBbW91bnQpIHtcclxuXHJcbiAgICAgICAgICBjb25zdCBsZW4gPSArZmF2b3JpdGVzQW1vdW50Lmxlbmd0aDtcclxuICAgICAgICAgIGNvbnN0IGZhdm9yaXRlc0NvdW50ID0gbGVuIHx8IDA7XHJcblxyXG4gICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgncC5mYXYnKVswXS5pbm5lckhUTUwgPSBgPGkgY2xhc3M9XCJoZWFydC1pY29uIGFjdGl2ZVwiPjwvaT4ke2Zhdm9yaXRlc0NvdW50fWA7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KVxyXG4gICAgfSlcclxuICB9LCAxMDAwKVxyXG5cclxufVxyXG4iXX0=
